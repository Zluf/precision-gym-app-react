[{"/Users/Zluf/Desktop/Dev Stuffs/front-end-mentor-and-other-apps/precision-gym-app-react/src/index.js":"1","/Users/Zluf/Desktop/Dev Stuffs/front-end-mentor-and-other-apps/precision-gym-app-react/src/App.js":"2","/Users/Zluf/Desktop/Dev Stuffs/front-end-mentor-and-other-apps/precision-gym-app-react/src/components/ExerciseFormModal.js":"3","/Users/Zluf/Desktop/Dev Stuffs/front-end-mentor-and-other-apps/precision-gym-app-react/src/components/Logo/Logo.js":"4","/Users/Zluf/Desktop/Dev Stuffs/front-end-mentor-and-other-apps/precision-gym-app-react/src/components/Exercise.js":"5","/Users/Zluf/Desktop/Dev Stuffs/front-end-mentor-and-other-apps/precision-gym-app-react/src/test-code/InputValue.js":"6","/Users/Zluf/Desktop/Dev Stuffs/front-end-mentor-and-other-apps/precision-gym-app-react/src/context/AppProvider.js":"7","/Users/Zluf/Desktop/Dev Stuffs/front-end-mentor-and-other-apps/precision-gym-app-react/src/context/app-context.js":"8","/Users/Zluf/Desktop/Dev Stuffs/front-end-mentor-and-other-apps/precision-gym-app-react/src/components/RepGauge.js":"9","/Users/Zluf/Desktop/Dev Stuffs/front-end-mentor-and-other-apps/precision-gym-app-react/src/components/Routine.js":"10"},{"size":174,"mtime":1679654184000,"results":"11","hashOfConfig":"12"},{"size":1181,"mtime":1681140213000,"results":"13","hashOfConfig":"12"},{"size":3096,"mtime":1679664496000,"results":"14","hashOfConfig":"12"},{"size":171,"mtime":1648226748000,"results":"15","hashOfConfig":"12"},{"size":2436,"mtime":1681159948000,"results":"16","hashOfConfig":"12"},{"size":707,"mtime":1678899535000,"results":"17","hashOfConfig":"12"},{"size":5917,"mtime":1681142591000,"results":"18","hashOfConfig":"12"},{"size":112,"mtime":1671818701000,"results":"19","hashOfConfig":"12"},{"size":731,"mtime":1680539166000,"results":"20","hashOfConfig":"12"},{"size":2037,"mtime":1681159375000,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"15ufotc",{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"/Users/Zluf/Desktop/Dev Stuffs/front-end-mentor-and-other-apps/precision-gym-app-react/src/index.js",[],["46","47"],"/Users/Zluf/Desktop/Dev Stuffs/front-end-mentor-and-other-apps/precision-gym-app-react/src/App.js",[],"/Users/Zluf/Desktop/Dev Stuffs/front-end-mentor-and-other-apps/precision-gym-app-react/src/components/ExerciseFormModal.js",[],"/Users/Zluf/Desktop/Dev Stuffs/front-end-mentor-and-other-apps/precision-gym-app-react/src/components/Logo/Logo.js",[],"/Users/Zluf/Desktop/Dev Stuffs/front-end-mentor-and-other-apps/precision-gym-app-react/src/components/Exercise.js",["48","49","50"],"/Users/Zluf/Desktop/Dev Stuffs/front-end-mentor-and-other-apps/precision-gym-app-react/src/test-code/InputValue.js",[],["51","52"],"/Users/Zluf/Desktop/Dev Stuffs/front-end-mentor-and-other-apps/precision-gym-app-react/src/context/AppProvider.js",["53"],"import React from \"react\";\nimport AppContext from \"./app-context\";\nimport App from \"../App\";\n\nexport default function AppProvider(props) {\n  const [routineList, setRoutineList] = React.useState([]);\n  const [exerciseList, setExerciseList] = React.useState([]);\n  const [currentExercise, setCurrentExercise] = React.useState(null);\n  const [modalWindow, setModalWindow] = React.useState(false);\n\n  const fetchExerciseDatabase = React.useCallback(async () => {\n    try {\n      const response = await fetch(\n        \"https://precision-gym-default-rtdb.firebaseio.com/routines.json\"\n        // \"https://precision-gym-default-rtdb.firebaseio.com/exercises.json\"\n      );\n      if (!response.ok) {\n        throw new Error(\"Could not reach database...\");\n      }\n      const data = await response.json();\n      console.log(\"Fetched Routines as Objects:\", data);\n      const newRoutineList = data ? Object.entries(data) : [];\n      console.log(\"Fetched Routines as Object Entries:\", newRoutineList);\n\n      setRoutineList(newRoutineList);\n    } catch (err) {\n      console.log(err);\n    }\n  }, []);\n\n  // !! Find a way to add routine as 1 level before exList\n  // Saves automatically as unnamed routine\n  const addRoutineToDatabase = async function (newExInput) {\n    const newRoutine = [\n      {\n        id: context.routineList.length + 1,\n        current: true,\n        exercises: [...newExInput],\n      },\n    ];\n\n    await fetch(\n      \"https://precision-gym-default-rtdb.firebaseio.com/routines/new-routine.json\",\n      {\n        method: \"POST\",\n        body: JSON.stringify(newRoutine),\n        headers: { \"Content-Type\": \"application-json\" },\n      }\n    );\n    setRoutineList((prevRoutineList) => {\n      return [...prevRoutineList, newRoutine];\n    });\n    console.log(newRoutine);\n  };\n\n  const addExToDatabase = async function (newExInput) {\n    const newRoutineName = \"New Routine\";\n\n    const newEx = {\n      id: context.routineList[newRoutineName]\n        ? context.routineList[newRoutineName].length + 1\n        : 1,\n      ...newExInput,\n    };\n\n    await fetch(\n      `https://precision-gym-default-rtdb.firebaseio.com/routines/${newRoutineName}.json`,\n      // `https://precision-gym-default-rtdb.firebaseio.com/exercises.json`,\n      {\n        method: \"POST\",\n        // body: JSON.stringify({ name: newRoutineName, exercises: [newEx] }),\n        body: JSON.stringify(newEx),\n        headers: { \"Content-Type\": \"application-json\" },\n      }\n    );\n    // setRoutineList((prevRoutineList) => {\n    //   return [\n    //     ...prevRoutineList,\n    //     prevRoutineList\n    //       .find((r) => (r.name = newRoutineName))\n    //       .exercises.push(newEx),\n    //   ];\n    // });\n    setRoutineList((prevRoutineList) => {\n      console.log(prevRoutineList);\n      let updatedRoutineList = prevRoutineList;\n      updatedRoutineList[newRoutineName] = [];\n      updatedRoutineList[newRoutineName].push(newEx);\n      return Object.values(updatedRoutineList);\n    });\n  };\n\n  const updateExercise = async (newExerciseData) => {\n    const updatedEx = { id: context.currentExercise.id, ...newExerciseData };\n    const newExList = [\n      ...context.exerciseList.filter(\n        (ex) => ex.id !== context.currentExercise.id\n      ),\n      updatedEx,\n    ].sort((a, b) => a.name - b.name);\n\n    setExerciseList(newExList);\n    setCurrentExercise(null);\n\n    await fetch(\n      \"https://precision-gym-default-rtdb.firebaseio.com/exercises.json\",\n      {\n        method: \"PUT\",\n        body: JSON.stringify(newExList),\n        headers: { \"Content-Type\": \"application-json\" },\n      }\n    );\n  };\n\n  const updateExerciseList2 = async (routineName, updatedEx) => {\n    // Updates local context\n    const newRoutineList = [\n      ...context.routineList.filter((r) => r[1].id !== updatedEx.id),\n      updatedEx,\n    ];\n    setExerciseList(newRoutineList);\n\n    // Updates database\n    await fetch(\n      `https://precision-gym-default-rtdb.firebaseio.com/routines/${routineName}/${\n        updatedEx.id - 1\n      }.json`,\n      {\n        method: \"PUT\",\n        body: JSON.stringify(updatedEx),\n        headers: { \"Content-Type\": \"application-json\" },\n      }\n    );\n  };\n\n  const deleteExercise = (routineName, exName) => {\n    console.log(\"Exercise to Be Deleted:\", routineName, \"->\", exName);\n    const updatedExerciseList = context.routineList[routineName].filter(\n      (ex) => ex.name !== exName\n    );\n    const updatedRoutineList = context.routineList;\n    updatedRoutineList[routineName] = updatedExerciseList;\n\n    console.log(`Updated Routine list:`, updatedRoutineList);\n    setRoutineList(updatedRoutineList);\n\n    fetch(\"https://precision-gym-default-rtdb.firebaseio.com/routines.json\", {\n      method: \"PUT\",\n      body: JSON.stringify(updatedRoutineList),\n      headers: { \"Content-Type\": \"application-json\" },\n    });\n  };\n\n  const toggleModal = function (exerciseData) {\n    if (exerciseData && modalWindow === false) {\n      setCurrentExercise(exerciseData);\n      setModalWindow(true);\n    }\n    if (exerciseData && modalWindow === true) {\n      setCurrentExercise(null);\n      setModalWindow(false);\n    }\n    if (!exerciseData) {\n      setCurrentExercise(null);\n      setModalWindow(!modalWindow);\n    }\n  };\n\n  const context = {\n    routineList: routineList,\n    exerciseList: exerciseList,\n    modalWindowIsOpen: modalWindow,\n    addExToDatabase: addExToDatabase,\n    deleteExercise: deleteExercise,\n    toggleModal: toggleModal,\n    currentExercise: currentExercise,\n    updateExercise: updateExercise,\n    updateExerciseList2: updateExerciseList2,\n  };\n\n  React.useEffect(() => {\n    // executes upon mount, gets stored in memory, therefore does not execute on further re-renders\n    // console.log(routineList);\n    fetchExerciseDatabase();\n  }, [fetchExerciseDatabase]);\n\n  return (\n    <AppContext.Provider value={context}>\n      <App>{props.children}</App>\n    </AppContext.Provider>\n  );\n}\n","/Users/Zluf/Desktop/Dev Stuffs/front-end-mentor-and-other-apps/precision-gym-app-react/src/context/app-context.js",[],"/Users/Zluf/Desktop/Dev Stuffs/front-end-mentor-and-other-apps/precision-gym-app-react/src/components/RepGauge.js",["54"],"import React from \"react\";\nimport AppContext from \"../context/app-context\";\nimport \"./RepGauge.css\";\n\nexport default function RepGauge(props) {\n  let innerGauge = [];\n  // Reverse iteration because CSS flex-direction: row-reverse\n  for (let i = 5; i > 0; i--) {\n    innerGauge.push(\n      <span\n        key={i}\n        onClick={props.onRepClick}\n        data-value={i * 20}\n        className=\"circle\"\n        style={{\n          backgroundColor: props.rep >= i * 20 && \"green\",\n        }}\n      ></span>\n    );\n  }\n\n  return (\n    <div className=\"rep-expanded\" data-rep-num={props.repIndex}>\n      <span>{`Rep: ${props.repIndex + 1}`}</span>\n      <div className=\"gauge\">{innerGauge.map((circle) => circle)}</div>\n    </div>\n  );\n}\n","/Users/Zluf/Desktop/Dev Stuffs/front-end-mentor-and-other-apps/precision-gym-app-react/src/components/Routine.js",[],{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":8,"column":9,"nodeType":"61","messageId":"62","endLine":8,"endColumn":18},{"ruleId":"59","severity":1,"message":"63","line":11,"column":9,"nodeType":"61","messageId":"62","endLine":11,"endColumn":25},{"ruleId":"59","severity":1,"message":"64","line":32,"column":9,"nodeType":"61","messageId":"62","endLine":32,"endColumn":22},{"ruleId":"55","replacedBy":"65"},{"ruleId":"57","replacedBy":"66"},{"ruleId":"59","severity":1,"message":"67","line":33,"column":9,"nodeType":"61","messageId":"62","endLine":33,"endColumn":29},{"ruleId":"59","severity":1,"message":"68","line":2,"column":8,"nodeType":"61","messageId":"62","endLine":2,"endColumn":18},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"no-unused-vars","'nameInput' is assigned a value but never used.","Identifier","unusedVar","'onDeleteExercise' is assigned a value but never used.","'onBlurHandler' is assigned a value but never used.",["69"],["70"],"'addRoutineToDatabase' is assigned a value but never used.","'AppContext' is defined but never used.","no-global-assign","no-unsafe-negation"]